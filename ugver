_G.UnitName = "ZAdmiral Of Ice"

repeat task.wait(.1) until game:IsLoaded()
repeat task.wait(.5) until game:GetService("Players")
repeat task.wait(.5) until game.Players.LocalPlayer
repeat task.wait(.5) until game:GetService("Players").LocalPlayer.Character and workspace.Camera.CameraSubject == game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid")

local Workspace = game:GetService("Workspace")
local Terrain = Workspace:WaitForChild("Terrain")
Terrain.WaterReflectance = 0
Terrain.WaterTransparency = 1
Terrain.WaterWaveSize = 0
Terrain.WaterWaveSpeed = 0

local Lighting = game:GetService("Lighting")
Lighting.Brightness = 0
Lighting.GlobalShadows = false
Lighting.FogEnd = 9e100
Lighting.FogStart = 0

sethiddenproperty(Lighting, "Technology", 2)
sethiddenproperty(Terrain, "Decoration", false)

local function clearTextures(v)
    if v:IsA("BasePart") and not v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif (v:IsA("Decal") or v:IsA("Texture")) then
        v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
        v.Enabled = false
    elseif v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
        v.TextureID = 10385902758728957
    elseif v:IsA("SpecialMesh") then
        v.TextureId = 0
    elseif v:IsA("ShirtGraphic") then
        v.Graphic = 1
    elseif (v:IsA("Shirt") or v:IsA("Pants")) then
        v[v.ClassName .. "Template"] = 1
    elseif v.Name == "Foilage" and v:IsA("Folder") then
        v:Destroy()
    elseif string.find(v.Name, "Tree") or string.find(v.Name, "Water") or string.find(v.Name, "Bush") or string.find(v.Name, "grass") then
        task.wait()
        v:Destroy()
    end
end

game:GetService("Lighting"):ClearAllChildren()

for _, v in pairs(Workspace:GetDescendants()) do
    clearTextures(v)
end

Workspace.DescendantAdded:Connect(function(v)
    clearTextures(v)
end)

function deHash(HashedString)
    for i, v in pairs(require(game:GetService("ReplicatedStorage").Actions)) do
        for l, o in pairs(v) do
            if l == "name" and o == HashedString then
            return i
            end
        end
    end
end

function Hash(remoteName)
    return require(game:GetService("ReplicatedStorage").Actions)[remoteName]["name"]
end

function GetCost(unitName, unitUpgrade)
    if (unitUpgrade or 1) <= 5 then
        unitUpgrade = unitUpgrade + 1
        a = require(game:GetService("ReplicatedStorage").Modules.Bins.UnitUpgradeData)
        return a[unitName][unitUpgrade].Cost
    end
    return 9999999999999999999999
end

function GetUnitId(unitName)
    lb = {}
    a = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
    for i, v in pairs(a["Units"]) do
        if v.Type == unitName then
            table.insert(lb, v.Level, i)
        end
    end

    local highestIndex = nil
    local highestValue = nil
    for index, value in pairs(lb) do
        if not highestIndex or index > highestIndex then
            highestValue = value
        end
    end

    return highestValue
end

function GetYenCost(unitName)
	a = require(game:GetService("ReplicatedStorage").Modules.Bins.UnitUtils).GetYenCost
	a = getupvalues(a)
	return a[1][unitName][1]["Cost"]
end

function EquipUnit(unitName)
    a = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
    for i, v in pairs(a["EquippedUnits"]) do
        if v == GetUnitId(unitName) then
            return
        end
    end
    game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("UNIT_UNEQUIP_ALL"))
    repeat task.wait()
        a = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
    until #a["EquippedUnits"] == 0
    game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("UNIT_EQUIP_UNEQUIP"), GetUnitId(unitName))
end

function click(a)
    game:GetService("VirtualInputManager"):SendMouseButtonEvent(a.AbsolutePosition.X+a.AbsoluteSize.X-60,a.AbsolutePosition.Y+60,0,true,a,1)
    game:GetService("VirtualInputManager"):SendMouseButtonEvent(a.AbsolutePosition.X+a.AbsoluteSize.X-60,a.AbsolutePosition.Y+60,0,false,a,1)
end

function CheckLevel(unitName)
    a = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
    return a["Units"][GetUnitId(unitName)]["Level"]
end

function getBestUnit()
	unitsDamages = {}
	b = require(game:GetService("ReplicatedStorage").Modules.Bins.UnitData)
	a = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
	for i,v in pairs(a.Units) do
        if v.Type and b[v.Type] and b[v.Type]["Damage"] then
		    table.insert(unitsDamages, b[v.Type]["Damage"], v.Type)
        end
	end

    local highestIndex = nil
    local highestValue = nil
    for index, value in pairs(unitsDamages) do
        if not highestIndex or index > highestIndex then
            highestIndex = index
            highestValue = value
        end
    end
    return highestValue
end

function HasUnit(unitName)
	a = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
	for i,v in pairs(a.Units) do
		if v.Type == unitName then
			return true
		end
	end
	return false
end

function findCommonValue(t1, t2)
    local set = {}
    for _, v in ipairs(t1) do set[v] = true end
    for _, v in ipairs(t2) do if set[v] then return v end end
    return nil
end

if game.PlaceId == 17017769292 then
	if HasUnit(_G.UnitName) then
    	BestUnitName = _G.UnitName
	else
		BestUnitName = getBestUnit()
	end
    EquipUnit(BestUnitName)

    if CheckLevel(BestUnitName) < 25 then
        game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("CREATE_MATCH"))
        local ohString1 = Hash("CHANGE_MATCH_DATA")
        local ohTable2 = {
        ["Difficulty"] = "Normal", -- Difficulty
        ["FriendsOnly"] = false,
        ["Chapter"] = "FooshaVillage_Chapter1" -- Chapter/Story Mode
        }
        game:GetService("ReplicatedStorage").Actions.Action:FireServer(ohString1, ohTable2)
        game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("START_MATCH"))
    end

    game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("CREATE_MATCH"))

    local ohString1 = Hash("CHANGE_MATCH_DATA")
    local ohTable2 = {
    ["Difficulty"] = "Hard", -- Difficulty
    ["FriendsOnly"] = false,
    ["Chapter"] = "FooshaVillage_Infinite" -- Chapter/Story Mode
    }

    game:GetService("ReplicatedStorage").Actions.Action:FireServer(ohString1, ohTable2)
    game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("START_MATCH"))
else
    -- In-Game

    -- Anti AFK
    game:GetService('Players').LocalPlayer.Idled:connect(function()
        game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        task.wait(1)
        game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)

	game:GetService("ReplicatedStorage").Actions.Action.OnClientEvent:Connect(function(name, val)
		if deHash(name) == "WAVE_STARTED" then
			if not _G.GameStarted then
				_G.GameStarted = true
			end
			_G.WaveNumber = tonumber(val)
		end
	end)

    spawn(function()
        while task.wait(1) do
            game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("GAME_SKIPROUND"))
        end
    end)

	_G.UnitsPlaced = false

    -- Upgrade
    spawn(function()
        while task.wait(1) do
			if not _G.UnitsPlaced then
				repeat task.wait() until _G.UnitsPlaced
			end
			
            for i, v in pairs(workspace.Units:GetChildren()) do
                pcall(function()
                    if game.Players.LocalPlayer.leaderstats["Yen"].Value >= GetCost(v.Name, v:GetAttribute("CurrentUnitUpgradeStand")) then
                        print("Upgrading Unit: ".. tostring(v:GetAttribute("Entity")) .. ": " .. tostring(v:GetAttribute("CurrentUnitUpgradeStand")))
                        local ohString1 = Hash("UNIT_UPGRADE")
                        local ohNumber2 = v:GetAttribute("Entity")
                        game:GetService("ReplicatedStorage").Actions.Action:FireServer(ohString1, ohNumber2)
                    end
                end)
                task.wait(2)
            end
        end
    end)

	if HasUnit(_G.UnitName) then
    	BestUnitName = _G.UnitName
	else
		BestUnitName = getBestUnit()
	end
    print("Best Unit: " .. tostring(BestUnitName))

    t1 = {}
    t2 = {}
    a = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
    for i, v in pairs(a["Units"]) do
        if v.Type == BestUnitName then
            table.insert(t1, i)
        end
    end
    for i, v in pairs(a["EquippedUnits"]) do
        table.insert(t2, v)
    end

    BestUnitID = findCommonValue(t1, t2)

    while task.wait() do
		_G.UnitsPlaced = false

        print("Waiting for Game to start")
		repeat task.wait(1) until _G.GameStarted
        print("Game Started.")

        repeat task.wait() until game.Players.LocalPlayer.leaderstats["Yen"].Value >= GetYenCost(BestUnitName)
        game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("UNIT_PLACE"), BestUnitID, Vector3.new(-1669.8319091796875, 26.74508285522461, -529.0477294921875), 1)
        print("Placed Unit")
        task.wait(1)

        repeat task.wait() until game.Players.LocalPlayer.leaderstats["Yen"].Value >= GetYenCost(BestUnitName)
        game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("UNIT_PLACE"), BestUnitID, Vector3.new(-1669.717529296875, 26.74508285522461, -535.437744140625), 1)
        print("Placed Unit")
        task.wait(1)

        repeat task.wait() until game.Players.LocalPlayer.leaderstats["Yen"].Value >= GetYenCost(BestUnitName)
        game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("UNIT_PLACE"), BestUnitID, Vector3.new(-1663.3992919921875, 26.74508285522461, -529.29736328125), 1)
        print("Placed Unit")
        task.wait(1)

        repeat task.wait() until game.Players.LocalPlayer.leaderstats["Yen"].Value >= GetYenCost(BestUnitName)
        game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("UNIT_PLACE"), BestUnitID, Vector3.new(-1663.2342529296875, 26.74508285522461, -535.806884765625), 1)
        print("Placed Unit")
        task.wait(1)

		_G.UnitsPlaced = true

        spawn(function()
			repeat task.wait() until game:GetService("Players").LocalPlayer.PlayerGui.PAGES:FindFirstChild("MatchResultPage")
            repeat task.wait() until game:GetService("Players").LocalPlayer.PlayerGui.PAGES.MatchResultPage.Visible
            print("Game Ended..")
            task.wait(1)

            a = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
            print("Best Unit ID: ", tostring(BestUnitID))
            for i,v in pairs(a["Units"][BestUnitID]) do
                print(i,v)
            end
            unitLevel = a["Units"][BestUnitID]["Level"]

            if unitLevel < 25 then
                repeat
                    click(game:GetService("Players").LocalPlayer.PlayerGui.PAGES.MatchResultPage.Main.Options.ReplayButton)
                    task.wait(1)
                until not game:GetService("Players").LocalPlayer.PlayerGui.PAGES.MatchResultPage.Visible
            else
                repeat
                    game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("GAME_MODE_SELECTED_CTS"), "NormalLobby")
                    task.wait(1)
                until not game:GetService("Players").LocalPlayer.PlayerGui.PAGES.MatchResultPage.Visible
            end
        end)
		a = game:GetService("ReplicatedStorage").Remotes.GetInventory:InvokeServer()
		unitLevel = a["Units"][BestUnitID]["Level"]

		if unitLevel >= 25 then
			repeat task.wait() until _G.WaveNumber >= 31
			game:GetService("ReplicatedStorage").Actions.Action:FireServer(Hash("GAME_MODE_SELECTED_CTS"), "NormalLobby")
		else
			repeat task.wait() until game:GetService("Players").LocalPlayer.PlayerGui.PAGES:FindFirstChild("MatchResultPage")
            repeat task.wait() until game:GetService("Players").LocalPlayer.PlayerGui.PAGES.MatchResultPage.Visible
		end
		_G.GameStarted = false
    end
end
